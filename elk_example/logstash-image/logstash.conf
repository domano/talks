input {
  gelf {
    type => docker
    port => 5000
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
  }
}

filter {

    # parse
    # 
    
    if [message] =~ "^{" {

        # handle json messages
        json {
            source => "message"
        }        

    } else {


        # try to handle access logs in combined log format
        grok {
            patterns_dir => ["/patterns"]
            match => { "message" => "^%{IPORHOST:remote_ip} - %{USERNAME:http_username} \[%{HTTPDATE:http_time_local}\] \"%{WORD:method} %{DATA:url} %{DATA:proto}\" %{INT:response_status} %{INT:http_bytes_sent} %{QS:http_referer} %{QS:http_user_agent}( %{WORD:correlation_id})?" }
            tag_on_failure => [ ]
        }

        if [remote_ip] {
            
            mutate {
                convert => {"response_status" => "integer"}
                replace => { "message" => "%{response_status} ->%{method} %{url}" }
                replace => { "type" => "access" }
            }
            if [response_status] >= 500 {
                mutate { 
                    replace => { "level" => "ERROR" }
                }
            } else {
                if [response_status] >= 400 {
                    mutate { 
                        replace => { "level" => "WARNING" }
                    }
                }
            }
            
        } else {

            # For all others: at least try to find the log level
            mutate {
                remove_field => [ "level" ]
            }
            grok {
                patterns_dir => ["/patterns"]
                match => { "message" => ".*?%{LOGLEVEL:level}.*" }
                tag_on_failure => [ ]
            }
            if ! [level] {
                mutate { 
                    add_field => { "level" => "INFO" }
                }
            }
        }
    }

    # cleanup
    # 
    mutate {
        convert => {
            "level" => "string"
        }
        uppercase => [ "level" ]
        gsub => [
                   "level", "3", "ERROR",
                   "level", "6", "INFO"
                ]
    }
    
    # classify
    # 
    # classify the http calls to make filtering more easy
    # tags: asset, search
    if [url] =~ /(\.jpg|\.jpeg|\.png|\.ico|\.css|\.js|\.svg|\.gif|\.pdf|\.xml|\.woff|\.eot)/ {
        mutate {
            add_tag => ["asset"]
        }
    }
    
    if [url] =~ "\?q=|\&q=" {
        mutate {
            add_tag => ["search"]
        }
        grok {
            patterns_dir => ["/patterns"]
            match => { "url" => ".*q=%{SEARCH_TERM:search_term}.*" }
        }
        urldecode {
            field => "search_term"
        }
    }
}
